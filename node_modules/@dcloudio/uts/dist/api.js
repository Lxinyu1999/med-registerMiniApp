"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSwift = exports.toKotlin = void 0;
const path_1 = require("path");
const utils_1 = require("./utils");
const bindingsOverride = process.env['UTS_BINARY_PATH'];
const bindings = !!bindingsOverride
    ? require((0, path_1.resolve)(bindingsOverride))
    : require('./binding').default;
function resolveOptions(options) {
    const { input, output } = options;
    if (!(input === null || input === void 0 ? void 0 : input.root)) {
        return;
    }
    if (!(input === null || input === void 0 ? void 0 : input.filename)) {
        return;
    }
    if (!(output === null || output === void 0 ? void 0 : output.outDir)) {
        return;
    }
    if (output.sourceMap === true) {
        output.sourceMap = output.outDir;
    }
    else if (output.sourceMap === false) {
        output.sourceMap = '';
    }
    if (!output.imports) {
        // TODO
        output.imports = [];
    }
    input.root = (0, utils_1.normalizePath)(input.root);
    input.filename = (0, utils_1.normalizePath)(input.filename);
    output.outDir = (0, utils_1.normalizePath)(output.outDir);
    output.sourceMap = (0, utils_1.normalizePath)(output.sourceMap);
    return options;
}
function toKotlin(options) {
    const kotlinOptions = resolveOptions(options);
    if (!kotlinOptions) {
        return Promise.resolve({});
    }
    return bindings
        .toKotlin(toBuffer(kotlinOptions))
        .then((res) => JSON.parse(res));
}
exports.toKotlin = toKotlin;
function toSwift(options) {
    const swiftOptions = resolveOptions(options);
    if (!swiftOptions) {
        return Promise.resolve({});
    }
    return bindings
        .toSwift(toBuffer(swiftOptions))
        .then((res) => JSON.parse(res));
}
exports.toSwift = toSwift;
function toBuffer(t) {
    return Buffer.from(JSON.stringify(t));
}
