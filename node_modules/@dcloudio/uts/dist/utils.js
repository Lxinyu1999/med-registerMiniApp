"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printUtsResult = exports.printUtsResults = exports.printDone = exports.printStartup = exports.timeEnd = exports.normalizePath = exports.isWindows = void 0;
const os_1 = __importDefault(require("os"));
const picocolors_1 = __importDefault(require("picocolors"));
exports.isWindows = os_1.default.platform() === 'win32';
function normalizePath(id) {
    return exports.isWindows ? id.replace(/\\/g, '/') : id;
}
exports.normalizePath = normalizePath;
const round = (number) => Number(number.toFixed(2));
const hrTimeToMilliseconds = (hrtime) => hrtime[0] * 1e3 + hrtime[1] / 1e6;
function timeEnd(start) {
    return round(hrTimeToMilliseconds(process.hrtime()) - hrTimeToMilliseconds(start));
}
exports.timeEnd = timeEnd;
function printStartup(target, mode) {
    console.log(picocolors_1.default.cyan(`uts v${require('../package.json').version} ${picocolors_1.default.green(`building ${target} for ${mode}...`)}`));
}
exports.printStartup = printStartup;
function printDone(watch = false) {
    if (watch) {
        console.log(`DONE  Build complete. Watching for changes...`);
    }
    else {
        console.log(`DONE  Build complete.`);
    }
}
exports.printDone = printDone;
function printUtsResults(results, watch = false) {
    let longest = 0;
    let failed = [];
    let transformed = [];
    results.forEach((result) => {
        if (result.error) {
            failed.push(result);
        }
        else {
            transformed.push(result);
        }
    });
    if (failed.length) {
        console.log(picocolors_1.default.dim(`${picocolors_1.default.red(`✗`)} ${failed.length} files failed.`));
        failed.forEach((result) => {
            console.error(result.error.message.split(`Caused by:`)[0]);
        });
    }
    if (transformed.length) {
        for (const result of transformed) {
            const l = result.filename.length;
            if (l > longest)
                longest = l;
        }
        console.log(picocolors_1.default.dim(`${picocolors_1.default.green(`✓`)} ${transformed.length} files transformed.`));
        transformed.forEach((result) => {
            if (result.filename) {
                printUtsResult(result, longest);
            }
        });
    }
    printDone(watch);
}
exports.printUtsResults = printUtsResults;
function printUtsResult(result, maxLength = 0) {
    console.log(picocolors_1.default.green(result.filename.padEnd(maxLength + 2)) +
        ' ' +
        picocolors_1.default.dim(result.time + 'ms'));
}
exports.printUtsResult = printUtsResult;
